# -*- coding: utf-8 -*-
"""graphs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oDGCqgEEvekQRHuD4mQpYMIxpImMqnLg
"""

from google.colab import drive #to retrieve data from drive 
drive.mount('/content/drive/')

cd 'drive/My Drive/Data/Input_Data'

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

districts = ['Dhanbad', 'Jamui', 'Dhubri', 'Bokaro','Hardoi']

"""5 -- multi-bar graphs"""

# file = 'Histogram_Data_of_population_in_all_grid_amenities_catchment_area.csv'
file = 'Histogram_data_of_combined_grids_for__num_category_within_std_distance.csv'
grand = pd.read_csv(districts[0]+'/'+file)
# print(grand.keys()[0])
t = []
for i in range(0,len(districts)):
  filename = districts[i]+'/'+file
  temp = pd.read_csv(filename)
  temp = temp.to_numpy()
  temp = temp.tolist()
  # print(temp)
  t.append(temp[0])

    # print(temp[:,j][0])
  # print(t)
# print(t)
t = np.array(t)
t = t.transpose()
t = t.tolist()
print(t)

for i in range(1, 6):
  for j in range(0,len(districts)):
    t[i][j] = float(t[i][j])

# dic = dict()
# for i in range(len(grand.keys())):
#   dic[grand.keys()[i]] = t[i]
# # print(dic)
# df = pd.DataFrame(dic, columns=dic.keys())
# print(df)

barWidth = 0.15

br1 = np.arange(len(districts))
br2 = [x + barWidth for x in br1]
br3 = [x + barWidth for x in br2]
br4 = [x + barWidth for x in br3]
br5 = [x + barWidth for x in br4]

plt.bar(br1, t[1], width = barWidth,
        edgecolor ='grey', label ='Education')
plt.bar(br2, t[2], width = barWidth,
        edgecolor ='grey', label ='Health')
plt.bar(br3, t[3], width = barWidth,
        edgecolor ='grey', label ='Connectivity')
plt.bar(br4, t[4], width = barWidth,
        edgecolor ='grey', label ='Utilities')
plt.bar(br5, t[5], width = barWidth,
        edgecolor ='grey', label ='Government_Facilities')

# ax = plt.gca()
# # ax.set_xlim([xmin, xmax])
# ax.set_ylim([0, 1])

# x1,x2,y1,y2 = plt.axis()  
# plt.axis((x1,x2,0,1))

# plt.xlabel('gini_index_of_nearest_category_distance_in_all_grids', fontweight ='bold', fontsize = 10)
plt.ylabel('Number of Amenities', fontweight ='bold', fontsize = 10)
plt.xticks([r + 2*barWidth for r in range(len(districts))],
        t[0])
 
# plt.legend()
plt.legend(loc=1, prop={'size': 7})
# plt.savefig('Images/plot_'+file[:-4]+'.png')
plt.show()

# file = 'Histogram_Data_of_population_in_all_grid_amenities_catchment_area.csv'
# file = 'Histogram_data_of_combined_grids_for__for_nearest_category_distance_in_km.csv'
# file = 'Histogram_Data_of_population_in_combined_grid_amenities_catchment_area.csv'
# file = 'Histogram_data_of_all_grids_for__num_category_in_each_grid.csv'
file = 'Histogram_data_of_combined_grids_for_percentage_of_outlier_grids_for_nearest_category_distance.csv'
# file = 'Histogram_data_for_gini_index_of_num_category_within_std_range_for_combined_grids.csv'
# file = 'Histogram_data_of_rural_grids_for__for_nearest_category_distance_in_km.csv'


grand = pd.read_csv(districts[0]+'/'+file)
# print(grand.keys()[0])
t = []
for i in range(0,len(districts)):
  filename = districts[i]+'/'+file
  temp = pd.read_csv(filename)
  temp = temp.to_numpy()
  temp = temp.tolist()
  # print(temp)
  t.append(temp[0])

    # print(temp[:,j][0])
  # print(t)
# print(t)
t = np.array(t)
t = t.transpose()
t = t.tolist()
print(t)

for i in range(1, 6):
  for j in range(0,len(districts)):
    t[i][j] = float(t[i][j])

# dic = dict()
# for i in range(len(grand.keys())):
#   dic[grand.keys()[i]] = t[i]
# # print(dic)
# df = pd.DataFrame(dic, columns=dic.keys())
# print(df)

barWidth = 0.15

br1 = np.arange(len(districts))
br2 = [x + barWidth for x in br1]
br3 = [x + barWidth for x in br2]
br4 = [x + barWidth for x in br3]
br5 = [x + barWidth for x in br4]

plt.bar(br1, t[1], width = barWidth,
        edgecolor ='grey', label ='Education')
plt.bar(br2, t[2], width = barWidth,
        edgecolor ='grey', label ='Health')
plt.bar(br3, t[3], width = barWidth,
        edgecolor ='grey', label ='Connectivity')
plt.bar(br4, t[4], width = barWidth,
        edgecolor ='grey', label ='Utilities')
plt.bar(br5, t[5], width = barWidth,
        edgecolor ='grey', label ='Government_Facilities')

# ax = plt.gca()
# # ax.set_xlim([xmin, xmax])
# ax.set_ylim([0, 1])

# x1,x2,y1,y2 = plt.axis()  
# plt.axis((x1,x2,0,1))

# plt.xlabel('gini_index_of_nearest_category_distance_in_all_grids', fontweight ='bold', fontsize = 10)
plt.ylabel('Percantage of Amenities', fontweight ='bold', fontsize = 10)
plt.xticks([r + 2*barWidth for r in range(len(districts))],
        t[0])
 
# plt.legend()
plt.legend(loc=1, prop={'size': 7})
# plt.savefig('Images/plot_'+file[:-4]+'.png')
plt.show()

file = 'Data_for_rural_grid_population_density.csv'
grand = pd.read_csv(districts[0]+'/'+file)
# print(grand.keys()[0])
t = []
for i in range(0,len(districts)):
  filename = districts[i]+'/'+file
  temp = pd.read_csv(filename)
  temp = temp.to_numpy()
  temp = temp.tolist()
  # print(temp)
  t.append(temp[0])

    # print(temp[:,j][0])
  # print(t)
# print(t)
t = np.array(t)
t = t.transpose()
t = t.tolist()
print(t)

for i in range(1, 2):
  for j in range(0,len(districts)):
    t[i][j] = float(t[i][j])

# dic = dict()
# for i in range(len(grand.keys())):
#   dic[grand.keys()[i]] = t[i]
# # print(dic)
# df = pd.DataFrame(dic, columns=dic.keys())
# print(df)

barWidth = 0.15

br1 = np.arange(len(districts))
br2 = [x + barWidth for x in br1]
br3 = [x + barWidth for x in br2]
br4 = [x + barWidth for x in br3]
br5 = [x + barWidth for x in br4]

plt.bar(br1, t[1], width = barWidth,
        edgecolor ='grey', label ='Education')
plt.bar(br2, t[2], width = barWidth,
        edgecolor ='grey', label ='Health')
plt.bar(br3, t[3], width = barWidth,
        edgecolor ='grey', label ='Connectivity')
plt.bar(br4, t[4], width = barWidth,
        edgecolor ='grey', label ='Utilities')
plt.bar(br5, t[5], width = barWidth,
        edgecolor ='grey', label ='Government_Facilities')

# ax = plt.gca()
# # ax.set_xlim([xmin, xmax])
# ax.set_ylim([0, 1])

# x1,x2,y1,y2 = plt.axis()  
# plt.axis((x1,x2,0,1))

# plt.xlabel('gini_index_of_nearest_category_distance_in_all_grids', fontweight ='bold', fontsize = 10)
plt.ylabel('Population', fontweight ='bold', fontsize = 10)
plt.xticks([r + 2*barWidth for r in range(len(districts))],
        t[0])
 
# plt.legend()
plt.legend(loc=1, prop={'size': 7})
# plt.savefig('Images/plot_'+file[:-4]+'.png')
plt.show()